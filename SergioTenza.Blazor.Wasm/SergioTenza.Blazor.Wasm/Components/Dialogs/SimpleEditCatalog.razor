@using System.Diagnostics.CodeAnalysis
@using SergioTenza.Blazor.Wasm.Services
@implements IDialogContentComponent<SimpleEditCatalog.RegisterContent>
@inject MailService mailService

<!-- Header -->
<FluentDialogHeader ShowDismiss="true" Class="contact-dialog-header">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Mail())" Class="dialog-icon" />
        <FluentLabel Typo="Typography.PaneHeader" Class="dialog-title">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody Class="contact-dialog-body">
    <div class="contact-form-container">
        <p class="contact-intro">Completa el formulario a continuación y nos pondremos en contacto contigo lo antes posible.</p>

        <EditForm EditContext="@Context" FormName="ContactForm" novalidate Class="contact-form">
            <DataAnnotationsValidator />
            <div class="validation-summary">
                <FluentValidationSummary />
            </div>

            <div class="form-fields">
                <div class="form-field">
                    <FluentTextField Name="ContactForm.Name" @bind-Value="@Content.Name" Label="Nombre" Required Class="input-field" />
                    <FluentValidationMessage For="@(() => Content.Name)" Class="validation-message" />
                </div>

                <div class="form-field">
                    <FluentTextField Name="ContactForm.Email" @bind-Value="@Content.Email" Label="Email" Required Class="input-field" />
                    <FluentValidationMessage For="@(() => Content.Email)" Class="validation-message" />
                </div>

                <div class="form-field">
                    <FluentTextField Name="ContactForm.Position" @bind-Value="@Content.Position" Label="Cargo o Posición" Required Class="input-field" />
                    <FluentValidationMessage For="@(() => Content.Position)" Class="validation-message" />
                </div>

                <div class="form-field">
                    <FluentTextArea Name="ContactForm.Comments" @bind-Value="@Content.Comments" Label="¿En qué podríamos ayudarte?" Class="textarea-field" Rows="5" />
                    <FluentValidationMessage For="@(() => Content.Comments)" Class="validation-message" />
                </div>
            </div>
        </EditForm>
    </div>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter Class="contact-dialog-footer">
    <div class="footer-content">
        <FluentButton Appearance="Appearance.Accent" OnClick="SaveAsync" Disabled="@(!Context.Validate())" Class="submit-button">
            <FluentIcon Value="@(new Icons.Regular.Size20.Send())" Slot="start" />
            Enviar mensaje
        </FluentButton>

        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync" Class="cancel-button">
            Cancelar
        </FluentButton>
    </div>
</FluentDialogFooter>

<style>
    .contact-dialog-header {
        padding: 1.5rem;
        border-bottom: 1px solid #eaeaea;
    }

    .dialog-icon {
        color: #512BD4;
        margin-right: 0.5rem;
    }

    .dialog-title {
        font-size: 1.5rem;
        font-weight: 600;
    }

    .contact-dialog-body {
        padding: 1.5rem;
    }

    .contact-form-container {
        max-width: 600px;
        margin: 0 auto;
    }

    .contact-intro {
        margin-bottom: 1.5rem;
        color: #555;
        text-align: center;
        font-size: 1.1rem;
    }

    .contact-form {
        width: 100%;
    }

    .validation-summary {
        color: var(--error);
        margin-bottom: 1rem;
    }

    .form-fields {
        display: flex;
        flex-direction: column;
        gap: 1.2rem;
    }

    .form-field {
        width: 100%;
    }

    .input-field, .textarea-field {
        width: 100%;
    }

    .validation-message {
        margin-top: 0.25rem;
        font-size: 0.9rem;
    }

    .contact-dialog-footer {
        padding: 1.5rem;
        border-top: 1px solid #eaeaea;
    }

    .footer-content {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        width: 100%;
    }

    .submit-button {
        min-width: 150px;
    }

    .cancel-button {
        min-width: 100px;
    }

    @@media (max-width: 768px) {
        .contact-dialog-header,
        .contact-dialog-body,
        .contact-dialog-footer {
            padding: 1rem;
        }

        .dialog-title {
            font-size: 1.3rem;
        }

        .contact-intro {
            font-size: 1rem;
        }

        .form-fields {
            gap: 1rem;
        }
    }

    @@media (max-width: 480px) {
        .dialog-title {
            font-size: 1.2rem;
        }

        .footer-content {
            flex-direction: column;
            align-items: stretch;
        }

        .submit-button,
        .cancel-button {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }
</style>

@code
{
    @* Disabled="@(!Content.Validate())" *@
    private DateTime PickerDay = DateTime.Today;
    private bool DisabledDate(DateTime date)
    {
        return (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday);
    }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public RegisterContent Content { get; set; } = default!;

    private EditContext Context { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (Content is not null)
        {
            Context = new EditContext(Content);
        }
    }

    private async Task SaveAsync()
    {
        var sended = mailService.SendMailNotification(Content.Email, Content.Comments, Content.Name, Content.Position);
        if (sended.success)
        {
            await Dialog.CloseAsync(Content);
        }
        else
        {
            await Dialog.CloseAsync(sended.message);
        }
    }


    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    [RequiresUnreferencedCode("Necessary because of RangeAttribute usage")]
    public record RegisterContent
    {
        [MinLength(3, ErrorMessage = "El campo Nombre debe tener al menos 3 caracteres.")]
        [MaxLength(20, ErrorMessage = "El campo no Nombre debe tener mas de 20 caracteres.")]
        public string Name { get; set; } = string.Empty;

        [MinLength(3, ErrorMessage = "El campo Posicion debe tener al menos 3 caracteres.")]
        [MaxLength(20, ErrorMessage = "El campo Posicion no debe tener mas de 20 caracteres.")]
        public string Position { get; set; } = string.Empty;

        // [Phone(ErrorMessage = "El telefono suministrado no es valido.")]
        // public string Telephone { get; set; } = string.Empty;

        [MinLength(10, ErrorMessage = "El campo Comentario debe tener al menos 10 caracteres.")]
        public string Comments { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "El email suministrado no es valido.")]
        public string Email { get; set; } = string.Empty;

        // [DateRange]
        // public DateTime? Date { get; set; } = DateTime.Now;

        // [TimeRange("08:00", "18:00", ErrorMessage = "La hora debe estar entre las 08:00 y las 18:00.")]
        // public DateTime? Time { get; set; } = null;
    }
}
