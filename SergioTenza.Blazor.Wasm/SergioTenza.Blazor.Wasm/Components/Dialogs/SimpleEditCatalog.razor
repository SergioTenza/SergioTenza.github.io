@using System.Diagnostics.CodeAnalysis
@implements IDialogContentComponent<SimpleEditCatalog.RegisterContent>


<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <EditForm EditContext="@Context" FormName="ContactForm" novalidate>
        <DataAnnotationsValidator />
        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="ContactForm.Name" @bind-Value="@Content.Name" Label="Nombre" Required />
                <FluentValidationMessage For="@(() => Content.Name)" />
                <FluentTextField Name="ContactForm.Email" @bind-Value="@Content.Email" Label="Email" Required />
                <FluentValidationMessage For="@(() => Content.Email)" />
                <FluentTextField Name="ContactForm.Position" @bind-Value="@Content.Position" Label="Posicion"
                    Required />
                <FluentValidationMessage For="@(() => Content.Position)" />

                <FluentTextArea Name="ContactForm.Comments" @bind-Value="@Content.Comments"
                    Label="En que podriamos ayudarte?" Style="width:100%;" />
                <FluentValidationMessage For="@(() => Content.Comments)" />
            </FluentStack>
            @* <FluentDivider Style="margin: 10px;" Orientation="Orientation.Vertical" />
            <FluentStack Orientation="Orientation.Vertical" Style="height: 100%">
            <FluentLabel Style="margin-bottom: 16px;">
            Si prefieres que nos pongamos en contacto contigo por telefono agenda una llamada con nosotros.
            </FluentLabel>
            <FluentTextField Name="ContactForm.Telephone"
            @bind-Value="@Content.Telephone"
            Label="Telefono"
            Required />
            <FluentValidationMessage For="@(() => Content.Telephone)" />
            <FluentDatePicker Name="ContactForm.Date"
            DisabledDateFunc="@DisabledDate"
            @bind-PickerMonth="@PickerDay"
            @bind-Value="@Content.Date"
            Label="Elige tu dia laborable preferido"
            Required/>
            <FluentValidationMessage For="@(() => Content.Date)" />
            <FluentTimePicker Name="ContactForm.Time"
            @bind-Value="@Content.Time"
            Label="Hora para contactar:"
            Required/>
            <FluentValidationMessage For="@(() => Content.Time)" />
            </FluentStack> *@
        </FluentStack>


        <FluentDivider Style="margin: 10px;" Orientation="Orientation.Horizontal" />

    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentDivider Style="margin: 10px;" Orientation="Orientation.Horizontal" />
    <FluentButton Appearance="Appearance.Accent" OnClick="SaveAsync" Disabled="@(!Context.Validate())">Enviar
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code
{
    @* Disabled="@(!Content.Validate())" *@
    private DateTime PickerDay = DateTime.Today;
    private bool DisabledDate(DateTime date)
    {
        return (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday);
    }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public RegisterContent Content { get; set; } = default!;

    private EditContext Context { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (Content is not null)
        {
            Context = new EditContext(Content);
        }
    }

    private async Task SaveAsync()
    {
        var mailService = new MailService();
        var sended = await mailService.SendMail(Content.Email, Content.Comments, Content.Name, Constent.Position);
        if (sended)
        {
            await Dialog.CloseAsync(Content);
        }
        else
        {
            await Dialog.CloseAsync();
        }
    }


    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    [RequiresUnreferencedCode("Necessary because of RangeAttribute usage")]
    public record RegisterContent
    {
        [MinLength(3, ErrorMessage = "El campo Nombre debe tener al menos 3 caracteres.")]
        [MaxLength(20, ErrorMessage = "El campo no Nombre debe tener mas de 20 caracteres.")]
        public string Name { get; set; } = string.Empty;

        [MinLength(3, ErrorMessage = "El campo Posicion debe tener al menos 3 caracteres.")]
        [MaxLength(20, ErrorMessage = "El campo Posicion no debe tener mas de 20 caracteres.")]
        public string Position { get; set; } = string.Empty;

        // [Phone(ErrorMessage = "El telefono suministrado no es valido.")]
        // public string Telephone { get; set; } = string.Empty;

        [MinLength(10, ErrorMessage = "El campo Comentario debe tener al menos 10 caracteres.")]
        public string Comments { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "El email suministrado no es valido.")]
        public string Email { get; set; } = string.Empty;

        // [DateRange]
        // public DateTime? Date { get; set; } = DateTime.Now;

        // [TimeRange("08:00", "18:00", ErrorMessage = "La hora debe estar entre las 08:00 y las 18:00.")]
        // public DateTime? Time { get; set; } = null;
    }
}
